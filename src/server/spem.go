// Code generated by go-bindata.
// sources:
// server/ca.key
// server/ca.pem
// DO NOT EDIT!

package server

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"time"
	"unsafe"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len
	return b, nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _serverCaKey = "\x30\x82\x02\x5d\x02\x01\x00\x02\x81\x81\x00\xb1\x0b\x9d\x30\xa8\x4f\x4d\x99\x15\xdf\x20\xc8\xcf\x79\x6e\x3e\xb9\x5c\xf9\xd6\xb1\x82\x66\xde\x8f\x1d\x25\x91\xba\x3d\xd3\x9d\x8b\x51\x4e\xef\x2d\xa9\x3e\x2e\xf4\x66\xde\x87\x0a\x7d\x13\xf8\x7f\xc3\x20\x54\xf2\x08\xb6\xe3\x26\xef\xf0\xf8\xd9\x6a\xe6\xb1\x12\xb5\x0b\x7c\x9d\xba\x9b\xd7\xcc\x0b\x82\xeb\x1f\x77\xd5\x29\xa2\xbe\x89\xa2\x13\x56\x80\x38\xdc\xf4\xfd\xce\x9c\x3e\x06\x05\x8b\x7c\x88\x3f\xe2\x12\xaf\x67\xc6\x9b\x3b\xa5\x24\xad\x80\x96\x88\x07\xda\xa4\x70\x2c\xbd\x2f\xf0\x60\x9c\xc5\xc8\xef\x5f\x1f\x02\x03\x01\x00\x01\x02\x81\x80\x2b\x69\x93\xa3\xc8\xc1\x99\x5f\x7e\x53\x76\x30\x87\x5f\x59\x3f\x1c\x28\xc6\x42\x74\xc8\x6a\xfd\x0b\xce\xb3\xd5\xa5\xfb\x5f\x16\x74\x80\xfd\x7f\xfc\x8c\x51\x69\x26\x18\xcb\x5c\x05\xa0\x61\xf3\x3f\x30\xd3\x8e\xc0\xc2\x8e\x45\xe8\xd8\x51\x18\x54\x07\xb8\x85\x2e\x8c\x5f\xed\xd4\x13\x72\x58\xff\x4e\x75\x40\x17\x2b\x2d\xb8\x52\x07\x8b\x78\x33\xe5\x1e\x92\x83\x61\xe9\xa9\x1f\x94\xf5\x9c\xfc\x2d\x87\xe0\x3a\x95\x32\xca\xd7\x29\xa5\x00\x7b\x2e\x68\xf4\x9e\x88\xbb\xe5\x2c\xf6\xa1\x4b\xca\xad\x6f\x85\xcb\xfc\xde\xc1\x02\x41\x00\xd7\xea\x29\xe0\xd9\x9c\x68\x51\x70\x32\xc2\xd6\xa3\xa2\x14\x9b\x25\x5c\x04\x73\xfa\x8b\xc3\x2c\x8a\x97\xab\x4e\x47\x45\x7d\x41\x27\xdf\xba\x41\x55\xf7\x8b\x87\x17\x02\xf4\xe3\x1a\x19\xb2\xfc\xa6\x0e\x45\x9f\xdc\xa7\xab\x30\xc8\x44\x60\x2e\x4f\x75\xef\x0f\x02\x41\x00\xd1\xea\x18\xd9\xfd\x62\x0e\xc0\x28\xd0\x8d\xa2\xcc\x63\xe6\x6a\x3c\x84\xcf\x6b\x57\xd2\xb2\x38\xac\x24\x15\x80\xea\xdf\xa9\xf7\x7f\x32\x12\x1d\xbb\x44\xd2\xe3\x2b\xf8\x8e\x79\x65\x6d\xfb\x7e\xef\xd0\x0f\x96\x4b\x02\x16\x52\xb2\x14\x3c\x8a\x4a\xc1\x8e\xf1\x02\x40\x65\x8f\x9c\xf1\x4a\x0a\xfb\x3a\xcb\x66\xe5\x25\x27\x45\x37\x22\x1f\x39\xa0\x52\x99\x98\xa2\x4e\xd2\x46\x33\x6b\x17\xb5\x45\x0c\x9f\xdf\xe9\xf1\x8f\xa9\x68\x35\x3c\x0a\xc4\xfc\x0a\x2b\xea\x78\x52\xf7\xc5\xa2\x43\x9d\x8e\xb5\xdc\x8d\xe5\x1c\x03\x7e\x7a\xdb\x02\x41\x00\x9e\xb1\x34\x52\x70\x5d\x16\x3b\xad\x5f\x65\x04\x23\x32\x8e\xf9\xd7\x80\xab\xf2\x41\xb5\x96\x68\x83\xb2\xcf\xd2\xe3\x3d\x6d\x98\x1e\xbf\xb2\xb4\x69\x63\xb1\x6e\x6e\x4a\x7d\x23\x47\x4b\xeb\x2a\x5e\x8f\xd3\x88\xd2\x71\xe4\x80\x66\x02\x28\x76\x7f\xe7\x6e\x71\x02\x41\x00\xcf\xe8\xa6\xac\x93\xbb\x77\xcb\xc7\xb3\x17\xb9\x09\xdc\x1e\x39\xb6\x54\x57\xb7\xa1\xfd\xad\x2e\x46\xeb\x2f\xe6\x5d\xb5\x8a\xdb\x1e\xcc\x28\xe6\x96\xd8\x50\xa9\x65\x0d\x94\xa6\x2e\x45\x84\x1e\xb1\xb0\x1d\x78\x7f\x0e\xa1\xc2\x83\xe7\xad\xe6\xa9\x4b\x33\x22"

func serverCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_serverCaKey,
		"server/ca.key",
	)
}

func serverCaKey() (*asset, error) {
	bytes, err := serverCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "server/ca.key", size: 609, mode: os.FileMode(509), modTime: time.Unix(1446985792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _serverCaPem = "\x30\x82\x02\x39\x30\x82\x01\xa2\xa0\x03\x02\x01\x02\x02\x02\x06\x75\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x30\x2f\x31\x0e\x30\x0c\x06\x03\x55\x04\x06\x13\x05\x43\x68\x69\x6e\x61\x31\x0d\x30\x0b\x06\x03\x55\x04\x0a\x13\x04\x4b\x6f\x6f\x6c\x31\x0e\x30\x0c\x06\x03\x55\x04\x0b\x13\x05\x4b\x6f\x6f\x6c\x55\x30\x1e\x17\x0d\x31\x35\x31\x31\x30\x38\x31\x32\x32\x37\x31\x37\x5a\x17\x0d\x31\x36\x31\x31\x30\x38\x31\x32\x32\x37\x31\x37\x5a\x30\x2f\x31\x0e\x30\x0c\x06\x03\x55\x04\x06\x13\x05\x43\x68\x69\x6e\x61\x31\x0d\x30\x0b\x06\x03\x55\x04\x0a\x13\x04\x4b\x6f\x6f\x6c\x31\x0e\x30\x0c\x06\x03\x55\x04\x0b\x13\x05\x4b\x6f\x6f\x6c\x55\x30\x81\x9f\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x81\x8d\x00\x30\x81\x89\x02\x81\x81\x00\xb1\x0b\x9d\x30\xa8\x4f\x4d\x99\x15\xdf\x20\xc8\xcf\x79\x6e\x3e\xb9\x5c\xf9\xd6\xb1\x82\x66\xde\x8f\x1d\x25\x91\xba\x3d\xd3\x9d\x8b\x51\x4e\xef\x2d\xa9\x3e\x2e\xf4\x66\xde\x87\x0a\x7d\x13\xf8\x7f\xc3\x20\x54\xf2\x08\xb6\xe3\x26\xef\xf0\xf8\xd9\x6a\xe6\xb1\x12\xb5\x0b\x7c\x9d\xba\x9b\xd7\xcc\x0b\x82\xeb\x1f\x77\xd5\x29\xa2\xbe\x89\xa2\x13\x56\x80\x38\xdc\xf4\xfd\xce\x9c\x3e\x06\x05\x8b\x7c\x88\x3f\xe2\x12\xaf\x67\xc6\x9b\x3b\xa5\x24\xad\x80\x96\x88\x07\xda\xa4\x70\x2c\xbd\x2f\xf0\x60\x9c\xc5\xc8\xef\x5f\x1f\x02\x03\x01\x00\x01\xa3\x64\x30\x62\x30\x0e\x06\x03\x55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x02\x84\x30\x1d\x06\x03\x55\x1d\x25\x04\x16\x30\x14\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x02\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x01\x30\x0f\x06\x03\x55\x1d\x13\x01\x01\xff\x04\x05\x30\x03\x01\x01\xff\x30\x0e\x06\x03\x55\x1d\x0e\x04\x07\x04\x05\x06\x03\x07\x09\x01\x30\x10\x06\x03\x55\x1d\x23\x04\x09\x30\x07\x80\x05\x06\x03\x07\x09\x01\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x03\x81\x81\x00\x5d\x40\x68\x6c\xb2\x05\xf9\x52\x8b\x01\x41\xcd\xa4\xb8\x66\x22\xc7\xce\xd9\xba\xb6\xae\xec\xd0\x39\x0e\x9b\x66\x28\x1d\xe0\xb8\xc4\x39\xba\x89\x18\x3b\x3d\x7f\x81\xc6\x88\x88\xe4\x2b\x81\xbf\xc4\xc4\xcb\xd8\x0a\xe9\xac\xb4\x58\xd5\x8f\x47\x7f\xa1\x06\x81\xa3\x47\xfa\xa1\x05\x07\x12\xfd\x06\xc8\x89\xa4\x8e\xa4\xab\x07\xea\xb8\xf3\xa7\x14\xc8\x92\xf3\xac\x22\x4c\x8b\xe1\x00\x2c\xe6\xc4\x90\xb4\x8c\xdd\x7e\x4e\x20\xc2\xe8\xa6\xfb\xb5\x64\xd1\x2e\xf7\xcc\xf8\x91\xcd\x50\x9c\x83\x7f\x2f\x61\x3a\x19\x2c\x99\xa6"

func serverCaPemBytes() ([]byte, error) {
	return bindataRead(
		_serverCaPem,
		"server/ca.pem",
	)
}

func serverCaPem() (*asset, error) {
	bytes, err := serverCaPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "server/ca.pem", size: 573, mode: os.FileMode(509), modTime: time.Unix(1446985792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"server/ca.key": serverCaKey,
	"server/ca.pem": serverCaPem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"server": &bintree{nil, map[string]*bintree{
		"ca.key": &bintree{serverCaKey, map[string]*bintree{}},
		"ca.pem": &bintree{serverCaPem, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
