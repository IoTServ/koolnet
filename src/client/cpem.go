// Code generated by go-bindata.
// sources:
// client/cert2.key
// client/cert2.pem
// DO NOT EDIT!

package client

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"time"
	"unsafe"
)

func bindataRead(data, name string) ([]byte, error) {
	var empty [0]byte
	sx := (*reflect.StringHeader)(unsafe.Pointer(&data))
	b := empty[:]
	bx := (*reflect.SliceHeader)(unsafe.Pointer(&b))
	bx.Data = sx.Data
	bx.Len = len(data)
	bx.Cap = bx.Len
	return b, nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientCert2Key = "\x30\x82\x02\x5c\x02\x01\x00\x02\x81\x81\x00\xbf\xde\x57\x86\xde\x24\xed\x60\xad\x35\xef\x1b\x6d\xbe\xd0\x2f\xd7\x71\x41\x22\x6a\xb6\xba\x71\x09\x9f\x67\x2a\xbc\xc7\x0e\xdc\xab\x1b\xa4\xbe\xb8\x62\x59\xe3\xc1\xe6\x4d\x84\xf5\xb6\x1d\x0e\x10\x5e\xa6\x1c\x83\x4d\x94\xd4\x2c\x0b\xb6\xe9\x15\xc9\xa9\xf6\xdf\xf6\x21\x4c\x2f\x8a\x1f\xba\x2e\xe0\xfb\xd3\x8f\x8c\x1f\xe8\x19\xee\xe7\x39\x92\x94\xca\x01\xe5\xc4\x8d\x33\xc2\x84\x19\x9e\xc3\xbe\x89\xfd\x21\xc0\x6f\x72\xd5\x26\x44\x98\x85\x84\x8e\x0c\x13\x5c\x3b\x01\x18\x0a\xef\xf2\x2d\xfc\x7b\x23\x59\x9b\x46\xb5\x02\x03\x01\x00\x01\x02\x81\x80\x21\x9e\x38\xa1\xd5\xec\x8c\x77\x23\x02\x4f\x39\xf4\x19\xb9\xea\x98\x0a\x2d\x0a\x75\xbe\x3c\x9e\xaf\xbb\xf1\x5c\xa8\xa5\x0c\x32\x97\xfc\x88\xfa\x2d\xde\x75\xb7\x95\x72\xdf\xe4\x4b\x15\x34\xb4\x11\x24\x34\x60\xcc\x94\xdc\x5d\xec\xb5\xc4\xbf\xc4\x64\x88\x55\xfe\x5f\x3b\xf5\x31\xfc\x41\x07\x1f\x5e\x16\x05\x38\xb0\xba\xd5\x44\x3a\x7b\x66\x53\xcb\x2b\x88\x23\xbd\x7f\xae\x89\xd5\x20\x5f\x52\xbe\x71\x48\xa2\x80\x72\x54\x62\x5e\x45\xd6\x01\x46\xfb\xeb\x0d\xdd\xe3\x9f\x83\xf8\x30\x57\xaa\xe9\xd2\x41\x0a\x4c\x8e\xa5\x02\x41\x00\xf2\x77\x3f\x4e\xa6\x71\x99\x09\xfe\xd0\x2e\x11\x5f\x05\x67\xab\x0f\xe8\x4b\x23\xed\x45\xd1\xc6\x7f\x11\x6c\xf2\x8f\x11\x55\xc5\x74\xd1\xd5\x52\xc4\xcf\x5f\xc3\x62\x35\xe5\x37\xad\xe0\x5c\xc5\xd8\xb9\x85\x6e\x69\xfc\x5e\x96\x6b\x07\x20\x55\x5f\xe1\x3a\x9b\x02\x41\x00\xca\x94\x13\xac\x79\xf8\x77\xa1\xaa\x68\xd5\x5a\x98\xba\x8a\x89\x42\xa8\x61\xca\x5a\xec\xd8\xe6\xfd\x9d\x5b\x99\x9b\x58\x51\xea\xd9\xd7\xba\x03\xa7\x94\x5e\x07\x95\x4d\x27\xa8\xea\x6f\x70\xe0\xb5\x2f\x9e\x1c\x60\x2b\x3b\x0f\xef\x3e\xcf\x23\x09\x51\xb0\xef\x02\x40\x29\xc4\xf5\x38\xfd\x5f\x70\x77\xd2\x57\xd6\xb7\xd3\x60\xc0\xfd\x2d\x1e\x5d\x63\x71\x0a\xa8\x1a\xc3\xe5\x22\x99\x9e\x9f\xe3\xe0\xc2\x41\x2b\xb8\xb8\x82\xe9\x02\x65\xb6\xd7\x28\x02\x62\x36\x59\x36\xfe\xae\xc7\xd8\xa6\x4b\x3d\x2a\x6e\xed\xd9\x07\x4d\x6b\xa5\x02\x40\x57\xb8\x95\x68\x5b\x8c\xbf\x69\x0f\x1c\xc4\x3e\xad\xe2\x21\x39\x5c\xd7\x03\x39\x97\xf3\xf5\xdc\xd8\xb7\xba\x41\xa2\xe6\x34\xda\xc8\xa8\x44\xd1\x6e\x50\xae\x03\x04\xa0\xdb\x6a\xa6\xd1\xc9\x04\x55\x11\x20\x9b\x52\xfd\x85\x5e\xda\x0f\xcd\xac\x73\x4d\x9f\x9b\x02\x41\x00\x8b\x04\xe8\x39\xba\x24\x0c\x89\xdb\x2e\x4a\xd4\xa0\xca\x26\x9c\xe4\x4b\x3c\xad\xd3\x91\xe1\x15\xb8\x81\x4b\x81\x78\x56\x21\x63\x14\xf9\x39\xd6\x1a\x71\x5f\xc1\x50\xf5\xb1\xaa\xa2\x4f\xdb\x8c\xf4\x1d\xa4\xac\x6a\x29\x83\x5f\x32\x32\x69\x0e\x54\x32\x30\xf2"

func clientCert2KeyBytes() ([]byte, error) {
	return bindataRead(
		_clientCert2Key,
		"client/cert2.key",
	)
}

func clientCert2Key() (*asset, error) {
	bytes, err := clientCert2KeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/cert2.key", size: 608, mode: os.FileMode(509), modTime: time.Unix(1446985826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _clientCert2Pem = "\x30\x82\x02\x2a\x30\x82\x01\x93\xa0\x03\x02\x01\x02\x02\x02\x06\x7a\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x30\x2f\x31\x0e\x30\x0c\x06\x03\x55\x04\x06\x13\x05\x43\x68\x69\x6e\x61\x31\x0d\x30\x0b\x06\x03\x55\x04\x0a\x13\x04\x4b\x6f\x6f\x6c\x31\x0e\x30\x0c\x06\x03\x55\x04\x0b\x13\x05\x4b\x6f\x6f\x6c\x55\x30\x1e\x17\x0d\x31\x35\x31\x31\x30\x38\x31\x32\x32\x37\x31\x37\x5a\x17\x0d\x31\x36\x31\x31\x30\x38\x31\x32\x32\x37\x31\x37\x5a\x30\x31\x31\x0e\x30\x0c\x06\x03\x55\x04\x06\x13\x05\x43\x68\x69\x6e\x61\x31\x0e\x30\x0c\x06\x03\x55\x04\x0a\x13\x05\x4b\x6f\x6f\x6c\x32\x31\x0f\x30\x0d\x06\x03\x55\x04\x0b\x13\x06\x4b\x6f\x6f\x6c\x55\x32\x30\x81\x9f\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x81\x8d\x00\x30\x81\x89\x02\x81\x81\x00\xbf\xde\x57\x86\xde\x24\xed\x60\xad\x35\xef\x1b\x6d\xbe\xd0\x2f\xd7\x71\x41\x22\x6a\xb6\xba\x71\x09\x9f\x67\x2a\xbc\xc7\x0e\xdc\xab\x1b\xa4\xbe\xb8\x62\x59\xe3\xc1\xe6\x4d\x84\xf5\xb6\x1d\x0e\x10\x5e\xa6\x1c\x83\x4d\x94\xd4\x2c\x0b\xb6\xe9\x15\xc9\xa9\xf6\xdf\xf6\x21\x4c\x2f\x8a\x1f\xba\x2e\xe0\xfb\xd3\x8f\x8c\x1f\xe8\x19\xee\xe7\x39\x92\x94\xca\x01\xe5\xc4\x8d\x33\xc2\x84\x19\x9e\xc3\xbe\x89\xfd\x21\xc0\x6f\x72\xd5\x26\x44\x98\x85\x84\x8e\x0c\x13\x5c\x3b\x01\x18\x0a\xef\xf2\x2d\xfc\x7b\x23\x59\x9b\x46\xb5\x02\x03\x01\x00\x01\xa3\x53\x30\x51\x30\x0e\x06\x03\x55\x1d\x0f\x01\x01\xff\x04\x04\x03\x02\x02\x84\x30\x1d\x06\x03\x55\x1d\x25\x04\x16\x30\x14\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x02\x06\x08\x2b\x06\x01\x05\x05\x07\x03\x01\x30\x0e\x06\x03\x55\x1d\x0e\x04\x07\x04\x05\x09\x03\x01\x08\x07\x30\x10\x06\x03\x55\x1d\x23\x04\x09\x30\x07\x80\x05\x06\x03\x07\x09\x01\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x03\x81\x81\x00\x3a\x00\xd3\x4f\x3b\xd9\x78\x2c\xe2\x51\x77\xa7\x35\xee\xe2\xf0\xb4\x7e\x7e\xd9\x5d\x88\x71\xa3\xc6\x65\xf1\x65\xa2\x16\x47\x63\x5d\x94\x46\xf1\x49\x28\xba\x88\x65\xf7\x38\x1b\xcd\x68\x8e\x66\x4a\x84\x9a\xc5\x25\xa5\x4d\x95\x78\x1a\x3c\xda\x4b\xf7\xd4\xee\x72\x84\x3a\x8c\x71\x29\x9d\xb0\xa3\x79\x42\x72\x78\x66\xd8\x17\xdc\xd6\x85\x27\x6b\x3a\x31\xcf\x8d\xc6\x99\x35\xae\xc7\x21\xbb\x12\xa5\x77\x97\xff\x73\x0d\x5b\x81\x3b\x07\xc1\x16\xe5\x94\x19\xf2\xe8\x86\xfd\xa2\xeb\x47\x66\x27\x8f\x0d\x0a\x97\x9c\x03\x99"

func clientCert2PemBytes() ([]byte, error) {
	return bindataRead(
		_clientCert2Pem,
		"client/cert2.pem",
	)
}

func clientCert2Pem() (*asset, error) {
	bytes, err := clientCert2PemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "client/cert2.pem", size: 558, mode: os.FileMode(509), modTime: time.Unix(1446985826, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"client/cert2.key": clientCert2Key,
	"client/cert2.pem": clientCert2Pem,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"client": &bintree{nil, map[string]*bintree{
		"cert2.key": &bintree{clientCert2Key, map[string]*bintree{}},
		"cert2.pem": &bintree{clientCert2Pem, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
